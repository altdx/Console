import { IConsoleRequest } from "../Request/mod.ts";
import { IConsoleResponse } from "../Response/mod.ts";

/**
 * Altdx Console Command option type.
 */
export type ConsoleCommandOptionType = {
  /**
   * Option description.
   */
  description: string;

  /**
   * Option constraint.
   */
  constraint?: RegExp;

  /**
   * Option is required or not.
   */
  required?: boolean;
};

export type ShortOptionType = Record<string, ConsoleCommandOptionType>;
export type LongOptionType = Record<string, ConsoleCommandOptionType>;

/**
 * Altdx Console Command type.
 */
export type ConsoleCommandType = {
  /**
   * Command to execute.
   */
  name: string;

  /**
   * Description of command.
   */
  description: string;

  /**
   * Available short options for this command.
   */
  shortOptions?: ShortOptionType;

  /**
   * Available long options for this command.
   */
  longOptions?: LongOptionType;

  /**
   * Number of required arguments.
   */
  args?: number;

  /**
   * Function to run if command match.
   *
   * @param request - Inject request object build from user input.
   * @param response - Inject response object.
   */
  run: (
    request: IConsoleRequest,
    response: IConsoleResponse,
  ) => IConsoleResponse;
};

/**
 * Altdx Console Command interface.
 * This interface allows you to handle terminal command.
 */
export interface IConsoleCommand {
  /**
   * Gets name of command.
   */
  getName: () => string;

  /**
   * Gets command description.
   */
  getDescription: () => string;

  /**
   * Gets command short options.
   */
  getShortOptions: () => ShortOptionType | null;

  /**
   * Gets command long options.
   */
  getLongOptions: () => LongOptionType | null;

  /**
   * Checks command.
   */
  isValid: (request: IConsoleRequest) => boolean;

  /**
   * Gets error message generated by isValid method.
   */
  getErrorMessage: () => string | null;

  /**
   * @inheritDoc ConsoleCommandType.run
   */
  run: (
    request: IConsoleRequest,
    response: IConsoleResponse,
  ) => IConsoleResponse;
}

/**
 * Altdx Console Command Collection interface.
 * This interface allows you to handle terminal command collection.
 */
export interface IConsoleCommandCollection {
  /**
   * Gets command from collection.
   *
   * @param command - Name of command.
   */
  get: (command: string) => IConsoleCommand | null;

  /**
   * Gets all command from collection.
   */
  getAll: () => Record<string, IConsoleCommand>;

  /**
   * Filters commands by name from collection.
   *
   * @param command - Command schema.
   */
  filter: (command: RegExp) => Record<string, IConsoleCommand>;

  /**
   * Add command to collection.
   *
   * @param command - Command to add.
   */
  add: (command: IConsoleCommand) => IConsoleCommandCollection;

  /**
   * Remove command from collection.
   *
   * @param command - Name of command.
   */
  remove: (command: string) => IConsoleCommandCollection;

  /**
   * Remove all commands from collection.
   */
  removeAll: () => IConsoleCommandCollection;
}
